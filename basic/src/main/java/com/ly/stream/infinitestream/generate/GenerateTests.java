package com.ly.stream.infinitestream.generate;

import java.util.function.IntSupplier;
import java.util.stream.IntStream;
import java.util.stream.Stream;

/**
 * liyang 2021-04-04
 *
 * 使用 generate 创建无限流
 */
public class GenerateTests {
    public static void main(String[] args) {

        /**
         * public static<T> Stream<T> generate(Supplier<T> s)
         *
         * Returns an infinite sequential unordered stream where each element is
         * generated by the provided {@code Supplier}.  This is suitable for
         * generating constant streams, streams of random elements, etc.
         */
        Stream.generate(Math::random)
                .limit(5)
                .forEach(System.out::println);


        /**
         * 使用 generate 生成10个斐波拉契数
         * 这种写法是有副作用的，因为这种人为控制的状态依赖关系不适合并行流
         *
         * 这里使用的匿名类和Lambda的区别在于，匿名类可以通过字段定义状态，
         * 而状态又可以用 getAsInt方法来修改。这是一个副作用的例子。
         */
        IntSupplier fib = new IntSupplier() {
            private int previous = 0;
            private int current = 1;
            @Override
            public int getAsInt() {
                int oldPrevious = this.previous;
                int nextValue = this.previous + this.current;
                this.previous = this.current;
                this.current = nextValue;
                return oldPrevious;
            }
        };
        IntStream.generate(fib).limit(10).forEach(System.out::println);

    }
}
